#summary Feedzilla RESTful API method documentation
#labels Featured
=Feedzilla API Specification=
*Here we describe in detail the "Application Programming Interface" (API) of Feedzilla. Programmers can use the Feedzilla API to make applications, websites, widgets, and other projects that interact with Feedzilla's data.*

==Getting Started==

The following are the topics covered by this document.

===Topics===

  * [#Introduction Introduction]
    * [#General General]
    * [#Response_Codes_and_Error_Messages Response Codes and Error Messages]
      * [#HTTP_Status_Codes HTTP Status Codes]
      * [#Error_Messages Error Messages]
    * [#A_command_line_is_all_you_need_to_use_the_Feedzilla_API A command line is all you need to use the Feedzilla API]
  * [#REST_API_Documentation REST API Documentation]
    * [#Resources Resources]
    * [#Resource_Methods Resource Methods]
      * [#Cultures_Methods Cultures Methods]
      * [#Categories_and_Subcategories_Methods Categories and Subcategories Methods]
      * [#Articles_Methods Articles Methods]
  * [#Terms_of_Service Terms of Service]
----
==Introduction==
===General===
The API attempts to conform to the design principles of [http://en.wikipedia.org/wiki/Representational_State_Transfer Representational State Transfer] (REST).

The API presently supports the following data formats: XML, JSON, and the RSS and Atom syndication formats, with some methods only accepting a subset of these formats.

The following requests a JSON response format by using the "json" extension:

`http://api.feedzilla.com/v1/cultures.json`

Parameter values should be converted to UTF-8 and URL encoded.

All Feedzilla APIs support an optional return format parameter. Note that json is the default response format. XML is also available. Some endpoints also support a simple txt format. 
{{{
.json
}}}
All Feedzilla APIs support jsonp which is the json format with a callback specified, such as:
{{{
.json&callback=callback_method
}}}
The application communicating with a resource does not need information concerning firewalls, gateways, proxies or other network devices between the application and the server holding the resource.

All dates will be treated as UTC and their formats must be YYYY-DD-MM.

All published date time objects are UTC based and conform to [http://asg.web.cmu.edu/rfc/rfc822.html RFC822.]

===Response Codes and Error Messages===
====HTTP Status Codes====

The Feedzilla API attempts to return appropriate HTTP status codes for every request.

    * *200 OK*: Success!
    * *304 Not Modified*: There was no new data to return.
    * *400 Bad Request*: The request was invalid.  An accompanying error message will explain why.
    * *403 Forbidden*: The request is understood, but it has been refused.  An accompanying error message will explain why. 
    * *404 Not Found*: The URI requested is invalid or the resource requested, such as a category, does not exists.
    * *500 Internal Server Error*: Something is broken. 
    * *502 Bad Gateway*: Feedzilla is down or being upgraded.
    * *503 Service Unavailable*: The Feedzilla servers are up, but overloaded with requests. Try again later.

====Error Messages====

When the API returns error messages, it does so in your requested format. For example, an error from an XML method might look like this:

{{{
    <error>
        <statuscode>400</statuscode>
        <statusdescription>The specified order is invalid</statusdescription>
    </error>
}}}

====A command line is all you need to use the Feedzilla API====
If your system has [http://curl.haxx.se/ curl] (and it should!), youâ€™ve already got a great way to poke around the Feedzilla API.

====Entity-encoded HTML in Title, Description (Summary)  and Content====
The Title, Description (Summary) and Content fields might contain entity-encoded HTML. To be able to display these fields as HTML they must be entity-decoded.
----
==REST API==
===Resources===
The following are definitions of the resources that are exposed by the API:

|| *Resource Name* || *Description* ||
|| Culture || Describes a culture resource. (en_us for instance) ||
|| Category || Describes a category of source feeds ||
|| Subcategory || Describes a subcategory of source feeds ||
|| Articles || Describes a set articles ||

===Resource Methods===
The API supports the following methods to send and receive Feedzilla data.

Base URI: http://api.feedzilla.com






===Cultures Methods===
====/v1/cultures._format_====
*Description:* Returns a list of supported cultures.

*Formats:* xml, json

*HTTP Method(s):* GET

*Parameters:*
  * None

===Categories and Subcategories Methods===
====/v1/categories._format_=====
*Description*: Returns a list of supported categories.

*Formats:* xml, json

*HTTP Method(s):* GET

*Parameters:*
  * culture_code - Optional. Restricts the results to the given culture. for instance japan is ja_jp. Default is en_us.
  * order - Optional. The sort order of the list to be returned. Can be one of the following: 
    * popular - The list will be ordered by item popularity (most popular is first).
    * none - No special order. This is the default value.

====/v1/subcategories._format_====
*Description:* Returns a list of supported subcategories hierarchy.
    
*Formats:* xml, json

*HTTP Method(s):* GET

*Parameters:*
  * culture_code - Optional. Restricts the results to the given culture. for instance japan is ja_jp. Default is en_us.
     * order - Optional. The sort order of the list to be returned. Can be one of the following: 
       * popular - The list will be ordered by item popularity (most popular is first).
       * none - No special order. This is the default value.



    Description:

    Returns a list of supported subcategories for the category given by category_id.
     

    URL:

    http://api.feedzilla.com/v1/categories/{category_id}/subcategories.format

     

    Formats: 

    xml, json

     

    HTTP Method(s):

    GET


    Parameters:

        * order - Optional. The sort order of the list to be returned. Can be one of the following: 
              o popular - The list will be ordered by item popularity (most popular is first).
              o none - No special order. This is the default value.